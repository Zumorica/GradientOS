alias ls='ls --color=auto'

#-Colors-#
# Reset
Color_Off='\e[0m'       # Text Reset

# Regular Colors
Black='\e[0;30m'        # Black
Red='\e[0;31m'          # Red
Green='\e[0;32m'        # Green
Yellow='\e[0;33m'       # Yellow
Blue='\e[0;34m'         # Blue
Purple='\e[0;35m'       # Purple
Cyan='\e[0;36m'         # Cyan
White='\e[0;37m'        # White

# Bold
BBlack='\e[1;30m'       # Black
BRed='\e[1;31m'         # Red
BGreen='\e[1;32m'       # Green
BYellow='\e[1;33m'      # Yellow
BBlue='\e[1;34m'        # Blue
BPurple='\e[1;35m'      # Purple
BCyan='\e[1;36m'        # Cyan
BWhite='\e[1;37m'       # White

# Underline
UBlack='\e[4;30m'       # Black
URed='\e[4;31m'         # Red
UGreen='\e[4;32m'       # Green
UYellow='\e[4;33m'      # Yellow
UBlue='\e[4;34m'        # Blue
UPurple='\e[4;35m'      # Purple
UCyan='\e[4;36m'        # Cyan
UWhite='\e[4;37m'       # White

# Background
On_Black='\e[40m'       # Black
On_Red='\e[41m'         # Red
On_Green='\e[42m'       # Green
On_Yellow='\e[43m'      # Yellow
On_Blue='\e[44m'        # Blue
On_Purple='\e[45m'      # Purple
On_Cyan='\e[46m'        # Cyan
On_White='\e[47m'       # White

# High Intensity
IBlack='\e[0;90m'       # Black
IRed='\e[0;91m'         # Red
IGreen='\e[0;92m'       # Green
IYellow='\e[0;93m'      # Yellow
IBlue='\e[0;94m'        # Blue
IPurple='\e[0;95m'      # Purple
ICyan='\e[0;96m'        # Cyan
IWhite='\e[0;97m'       # White

# Bold High Intensity
BIBlack='\e[1;90m'      # Black
BIRed='\e[1;91m'        # Red
BIGreen='\e[1;92m'      # Green
BIYellow='\e[1;93m'     # Yellow
BIBlue='\e[1;94m'       # Blue
BIPurple='\e[1;95m'     # Purple
BICyan='\e[1;96m'       # Cyan
BIWhite='\e[1;97m'      # White

# High Intensity backgrounds
On_IBlack='\e[0;100m'   # Black
On_IRed='\e[0;101m'     # Red
On_IGreen='\e[0;102m'   # Green
On_IYellow='\e[0;103m'  # Yellow
On_IBlue='\e[0;104m'    # Blue
On_IPurple='\e[0;105m'  # Purple
On_ICyan='\e[0;106m'    # Cyan
On_IWhite='\e[0;107m'   # White
#-Welcoming message-#
if [ ${TERM} = "xterm" ]; then
    echo -e "                    ${Red}無限回廊${Color_Off}                "
    echo -e "${White}------------------------------------------------${Color_Off}"
    echo -e "${IPurple}Even though spring is the season of dreams..."
    echo -e "...All dreams must come to an end sometime... (${Cyan}Mii-!${Color_Off}${IPurple})"
    echo -e "${IPurple}But I'm determined to keep living in this dream,"
    echo -e "so I struggle while smiling~ (${Purple}Nipaー${Yellow}☆${Purple}!${IPurple})"
    echo -e "${White}------------------------------------------------${Color_Off}"
fi
if [ ${TERM} = "xterm-256color" ]; then
    echo -e "                    ${Red}無限回廊${Color_Off}                "
    echo -e "${White}------------------------------------------------${Color_Off}"
    echo -e "${IPurple}Even though spring is the season of dreams..."
    echo -e "...All dreams must come to an end sometime... (${Cyan}Mii-!${Color_Off}${IPurple})"
    echo -e "${IPurple}But I'm determined to keep living in this dream,"
    echo -e "so I struggle while smiling~ (${Purple}Nipaー${Yellow}☆${Purple}!${IPurple})"
    echo -e "${White}------------------------------------------------${Color_Off}"
fi

## Keybindings section
bindkey -e
bindkey '^[[7~' beginning-of-line                               # Home key
bindkey '^[[H' beginning-of-line                                # Home key
if [[ "${terminfo[khome]}" != "" ]]; then
  bindkey "${terminfo[khome]}" beginning-of-line                # [Home] - Go to beginning of line
fi
bindkey '^[[8~' end-of-line                                     # End key
bindkey '^[[F' end-of-line                                     # End key
if [[ "${terminfo[kend]}" != "" ]]; then
  bindkey "${terminfo[kend]}" end-of-line                       # [End] - Go to end of line
fi
bindkey '^[[2~' overwrite-mode                                  # Insert key
bindkey '^[[3~' delete-char                                     # Delete key
bindkey '^[[C'  forward-char                                    # Right key
bindkey '^[[D'  backward-char                                   # Left key
bindkey '^[[5~' history-beginning-search-backward               # Page up key
bindkey '^[[6~' history-beginning-search-forward                # Page down key

# Navigate words with ctrl+arrow keys
bindkey '^[Oc' forward-word                                     #
bindkey '^[Od' backward-word                                    #
bindkey '^[[1;5D' backward-word                                 #
bindkey '^[[1;5C' forward-word                                  #
bindkey '^H' backward-kill-word                                 # delete previous word with ctrl+backspace
bindkey '^[[Z' undo           

## Alias section 
alias cp="cp -i"                                                # Confirm before overwriting something
alias df='df -h'                                                # Human-readable sizes
alias fuck='sudo $(history -p \!\!)'
alias gradient="ssh -t gradient sudo systemctl restart ss14"
alias gradientlogs="ssh -t gradient sudo journalctl -xfea --unit=ss14"
alias overseerlogs="ssh -t centcomm sudo journalctl -xfea --unit=red@overseer"
alias stardreamlogs="ssh -t gradient sudo journalctl -xfea --unit=stardream"
alias hrt="python -c 'from datetime import date, datetime; from dateutil.relativedelta import relativedelta; start = datetime(2021, 5, 25, 10, 38); hrtDelta = (date.today()-start.date()); hrtRelative = relativedelta(datetime.now(), start); print(\"%s days since HRT treatment began. (%s year(s), %s month(s) %s day(s) %s hour(s) %s minute(s))\" % (hrtDelta.days, hrtRelative.years, hrtRelative.months, hrtRelative.days, hrtRelative.hours, hrtRelative.minutes))'"
alias hrtlily="python -c 'from datetime import date, datetime; from dateutil.relativedelta import relativedelta; start = datetime(2021, 1, 27, 19, 10); hrtDelta = (date.today()-start.date()); hrtRelative = relativedelta(datetime.now(), start); print(\"%s days since HRT treatment began. (%s year(s), %s month(s) %s day(s) %s hour(s) %s minute(s))\" % (hrtDelta.days, hrtRelative.years, hrtRelative.months, hrtRelative.days, hrtRelative.hours, hrtRelative.minutes))'"
alias youtube-dl="yt-dlp"
alias rebootkexec='sudo kexec -l /boot/vmlinuz-linux-zen --initrd=/boot/initramfs-linux-zen.img --reuse-cmdline && sudo systemctl kexec'

jack-share() {
  local IN=${1:-"null"}
  local OUT=${2:-"WEBRTC"}
  jack-matchmaker "$IN.*:output_FL" "$OUT.*:input_FL" "$IN.*:output_FR" "$OUT.*:input_FR"
}

alias vlc-share="jack-share 'VLC'"
alias chromium-share="jack-share '(Google Chrome|Chromium)'"
alias mpv-share="jack-share 'mpv'"

## Path
export PATH="$PATH:/home/vera/bin/"
export PATH="$PATH:/home/vera/.zls/"
export XDG_DATA_DIRS="$XDG_DATA_DIRS:$HOME/.nix-profile/share"
export DOTNET_CLI_UI_LANGUAGE=en
export PYTHONIOENCODING=UTF-8

# Maia prompt
PROMPT="%B%{$fg[cyan]%}%(4~|%-1~/.../%2~|%~)%u%b >%{$fg[cyan]%}>%B%(?.%{$fg[cyan]%}.%{$fg[red]%})>%{$reset_color%}%b "
# Print some system information when the shell is first started
# Print a greeting message when shell is started
echo $USER@$HOST  $(uname -srm)
